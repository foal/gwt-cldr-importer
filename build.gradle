group 'org.gwtproject.tools'
version '1.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
String cldrSystemVersion = System.getProperty("cldr.version")
String cldrVersion= cldrSystemVersion ==null?'latest': cldrSystemVersion
String cldrdir = buildDir.toString() + '/cldr-data/' + cldrVersion.toString()
System.setProperty("CLDR_DIR", cldrdir.toString())

repositories {
    mavenCentral()
    flatDir {
        dirs 'cldr-lib'
    }
}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'com.google.gwt', name: 'gwt-user', version: '2.8.2'
    compile group: 'com.google.gwt', name: 'gwt-dev', version: '2.8.2'
    compile group: 'com.google.gwt', name: 'gwt-servlet', version: '2.8.2'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile name: 'cldr'
    compile name: 'icu4j'
    compile name: 'utilities'
}

tasks {
    task downloadcldr() {
        if (project.hasProperty("update")) {
            exec {
                println('downloading CLDR---------------')
                commandLine 'svn', 'co', 'http://www.unicode.org/repos/cldr/tags/'+cldrVersion+'', cldrdir.toString()
            }
        }
    }

    task buildCldr(dependsOn: downloadcldr){
        if (project.hasProperty("update")) {
            exec {
                println('building CLDR---------------')
                commandLine 'ant', '-buildfile', cldrdir.toString()+'/tools/java/build.xml', 'clean', 'jar'
            }
        }
    }

    task updatecldr(type: Copy, dependsOn: buildCldr) {
        if (project.hasProperty("update")) {
            println('copying CLDR jars ---------------')
            from cldrdir.toString()+'/tools/java/libs/icu4j.jar'
            from cldrdir.toString()+'/tools/java/libs/utilities.jar'
            from cldrdir.toString()+'/tools/java/cldr.jar'
            into './cldr-lib'
        }
    }


    task generate(type: JavaExec) {
        if(new File(cldrdir.toString()).exists()==false){
            throw new IllegalStateException("Please execute build with update first")
        }

        String localesProperty = System.getProperty("locales")
        String locales = localesProperty==null?"":localesProperty.toString()

        String outputDir=buildDir.toString()+"/gwt-cldr"
        if(System.getProperty("gwt.cldr.root")!=null){
            outputDir=System.getProperty("gwt.cldr.root")
            println("Generating to "+outputDir)
        }else{
            println("Generating to build dir.. ")
        }

        List<String> argslist = ['--sourcedir', cldrdir.toString() + '/common/main', '--outdir', outputDir.toString()].toList()
        if(!locales.isEmpty()){
            println("generating for locales : "+locales)
            argslist.add("--restrictLocales")
            argslist.add(locales)
        }else{
            println("generating for all locales")
        }

        main = 'org.gwtproject.tools.cldr.GenerateGwtCldrData'
        classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath + configurations.compile + configurations.runtime
        args=argslist.toList()
        jvmArgs = ['-DCLDR_DIR=' + cldrdir.toString()]
    }
}
